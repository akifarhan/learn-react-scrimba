ELEMENT
    const element = <h1> Hello </h1>;

COMPONENT & PROPS
    independent, reusable pieces
    can be:
        FUNCTION
            function Welcome(props){
                return <h1> Welcome, {props.name} </h1>;
            }
        CLASS
            class Welcome extends React.component{
                render(){
                    return(
                        <h1> Welcome, {this.props.name} </h1>;
                    );
                }
            }

        Function => class
            1. create ES6 class extends React.Component
            2. + render()
            3. + context of the function
            4. props -> this.props

            function Clock(props) {
                return (
                    <div>
                    <h1>Hello, world!</h1>
                    <h2>It is {props.date.toLocaleTimeString()}.</h2>
                    </div>
                );
            }

            class Clock extends React.Component {
                render() {
                    return (
                    <div>
                        <h1>Hello, world!</h1>
                        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>
                    </div>
                    );
                }
            }



    const element = <Welcome name='Sara" /> - can use the component

    PROPS = properties/parameter;

    //Pass props
        const List= (props) => {
        { /* change code below this line */ }
        return <p>{props.tasks.join(", ")}</p>
        { /* change code above this line */ }
        };

        class ToDo extends React.Component {
        constructor(props) {
            super(props);
        }
        render() {
            return (
            <div>
                <h1>To Do Lists</h1>
                <h2>Today</h2>
                <List tasks={["walk dog", "workout", "code"]}/>
                <h2>Tomorrow</h2>
                <List tasks={["walk dog", "workout", "code"]}/>
            </div>
            );
        }
        };
    //set default props
        const ShoppingCart = (props) => {
            return (
                <div>
                <h1>Shopping Cart Component</h1>
                </div>
            )
            };
        // change code below this line
        ShoppingCart.defaultProps = { items: 0}
    //Testing typesProps
        const Items = (props) => {
            return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
        };

        // change code below this line
        Items.propTypes ={
            quantity: PropTypes.number.isRequired
        }
        // change code above this line

        Items.defaultProps = {
            quantity: 0
        };

        class ShoppingCart extends React.Component {
            constructor(props) {
                super(props);
            }
            render() {
                return <Items />
            }
        };

    COMPONENT VS ELEMENT
        Component = class
        Element = instances

    *NAME OF COMPONENT ADVISED TO BE CAPITAL LETTER TO DIFFERENTIATE WITH TAGS
    *ADVISABLE TO EXTRACT COMPONENTS TO SMALLER ONE
    *USE PROPS AS READ ONLY; DONT CHANGE THE VALUE
    *REACT COMPONENT MUST ACT AS LIKE PURE FUNCTION (NOT CHAGNGE THE VALUE OF PROPS) WITH RESPECTS TO THEIR PROPS
    *IF WANT TO CHANGE USE STATE

    Stateless functional component; any func accepts props and return JSX.
    Stateless component; class that extends React.Component but doesnt use internal state.
    Stateful component; any component that does maintain its own internal state
